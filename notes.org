Haskell Notes

* whitespace matters.  Parallel assignments must start at the same column.
  * Sometimes you can use {} instead of whitespace to control blocks, but you should avoid it
* no statements.  everything is an expression (everything has a return value)
* It seems that you can only do assignments in a script/module, not in an interpreter.
  * If you want to do assignments in the interpreter, you have to use let:
    let foo = 3
  * You can use {} to write long definitions in one line
  * :{ allows you to enter multiple lines until :}
  * No idea how to put a type declaration at the interpreter prompt
* It seems you can only have expressions in the interpreter, not in a script/module
  * in a module, it will lead to a compile parse error "naked expression at top level"
    I guess it makes some sense -- an random expression in a module
    would be evaluated, but the output would just be thrown away.  In
    a language with no side effects, there's no point for an
    expression
* type inference
* lists
  * all elements of a list must be the same type, but can have any length
  * make lists with []
  * Can do ranges with, e.g. [1..3].  [1..] is an infinite list
  * Strings are just lists of chars
* tuples
  * elements of tuples can have any type, but have fixed length
  * make tuples with parens
* Most functions are prefix, but not all (i.e., +, - are infix operators)
  * `foo` changes foo from prefix to infix
  * (foo) changes foo from infix to prefix
* parens can be used for grouping or for making tuples
* $ can also be used for grouping.  Everything after the $ takes precedence of the stuff before
  * These are equivalent:
    * putStrLn (show (1 + 1))
    * putStrLn (show $ 1 + 1)
    * putStrLn $ show (1 + 1)
    * putStrLn $ show $ 1 + 1
* There are no parens for calling functions, just
  f x y
  this calls f on x, which returns a new, curried version of f, and that gets called on y
* Function calls bind very tightly, more tightly than arithmetic operators, for example.
  Use parens to control binding.
* Type variables start with lowercase (typically a, b, c,...), Type names start with upper case
* variables and functions must start with lowercase.
* After the first letter, identifiers can contain a lot of different letters, including digits, underscores, and single quotes
* By convention, list variables end with s, lists of lists with ss, etc.
* use -- for comments
* "Overloaded" functions is one where there is a class constraint
  * sum :: Num a => [a] -> a
* Define functions:
  * With equals sign.  Looks a bit mathematical.
    double x = x + x
  * Can also define functions with "guarded equations", no equals sign needed.
    abs n | n >= 0    = n
          | otherwise = -n
  * Pattern matching
    * for example:
      (&&) :: Bool -> Bool -> Bool
      True && True = True
      _ && __ = False
    * But that always evaluates both arguments, so this is better:
      True && b = b
      False && _ = False
    * Patterns are matched in order.
    * cannot repeat variables, like "a && a = a"
    * Lists, instead of [a, b, c] is (a : (b : (c : [])))
* Anonymous functions, lambda expressions.  Use backslash for lambda
  * \x -> x + x
  * odds n = map (\x -> x*2 +1) [0..n-1]
* sections -- partial application of operators
  * 1 + 2
  * (1+) is a function that takes one argument and uses that as the second argument in "1 + _"
  * (+2) is a function that takes one argument and uses that as the first argument in "_ + 2"

* Once you use a name for a type, you can't use it anywhere else
  * does haskell have crappy namespacing?
  * http://stackoverflow.com/questions/4260507/avoiding-namespace-pollution-in-haskell
* list comprehensions
  * The thing that gives the range of values is a "generator"
    [x*x | x <- [1, 2, 3, 4, 5]]
    so the "x <- [1, 2, 3, 4, 5]" part is a generator
  * Order of the generators matters, the first generator moves most slowly, like nested fors
    later generators can use variables from earlier generators
  * filters on a generator are "guards", added after a comma
    factors n = [x | x <- [1..n], n `mod` x == 0]
  * zip
    pairs xs = zip xs (tail xs)
    sorted xs = and [x <= y | (x, y) <- pairs xs]
    positions x xs = [i | (x', i) <- zip xs [0..n], x == x']
      where n = length xs - 1
* ++ is list concatenation
* : is cons
* . is function composition
* foldl's first argument is a function of the form (f acc elt) -- the first argument is the accumulator
* foldr's first argument is a function of the form (f elt acc) -- the second argument is the accumulator
* type aliases
  * e.g.:
    type Parser a = String -> [(a, String)]
    now, saying:
      item :: Parser Char
    is equivalent to saying:
      item :: String -> [(Char, String)]
    and
      p :: Parser (Char,Char)
    is equivalent to:
      p :: String -> [((Char,Char), String)]
    Parser is an example of a monad
* do keyword --
  do monad
     a <- monad
     b <- monad
     monad
     monad
  Evaluates each monad in sequence.
  If any monad fails, the whole thing fails.
  Return value is the return value of the last expression
  Intermediate values are discarded unless you assign them
  Do only works with monads.

  It's totally unclear so far what makes something a monad, and how
  the monads get their input.  Do they each run on the previous
  monad's output?  But the monad doesn't return something of the same
  type as the input, and if that's what it did it'd just be reduce.

  Supposed to read http://www.cs.nott.ac.uk/~gmh/monads
* Create new types with the 'data' command
  data Expr = Val Int | Div Expr Expr

  eval           :: Expr -> Int
  eval (Val n)   =  n
  eval (Div x y) =  eval x `div` eval y
* Create classes with the 'class' command and the 'instance' command
  * 'class' specifies the methods that every instance needs to define
    It can also specify default implementations for those methods, but
    doesn't need to

   class Eq a where
      (==) :: a -> a -> Bool
      (/=) :: a -> a -> Bool

      x /= y = not (x == y)

   An instance then defines the missing methods.  Instances may not
   define new types/methods that aren't in the original class.

   instance Eq Bool where
      False == False = True
      True  == True  = True
      _     == _     = False

* Monads
  Here is a quick summary of monads, based on reading

  http://www.cs.nott.ac.uk/~gmh/monads


  The basic idea behind monads is to implement sequential,
  state-changing programming using functional style, where functions
  should have no side effects.*

  * Having no side effects is great because it makes functions "easier
  to reason about".  For example, it's easier to write tests for,
  easier to move functions around since it's easier to see its
  effects, etc.

  The basic strategy is simple: all functions should take the relevant
  state of the world as one of its inputs and output the changed state
  of the world.  Then you can chain them together by passing the
  changed state to the next function.

  The idea of monads is just some conventions and syntactic sugar
  around this idea.

  * A monad is any type that supports two functions:

    * return - this is how the sequence ends.  This basically returns
      a value and returns the state unchanged.

    * >>= (aka bind) - this is how the state is propagates from one
      function in the sequence to the next.

      This takes a function and a state.  It applies the function on
      the state to get a new state, and it returns that new state.

    * How these are defined depends on your application.

    * The rest of the magic is simply the syntactic sugar that Haskell
      has that makes currying look simple

      You can use bind to make something that looks like this:

      eval (Val n)   = Just n
      eval (Div x y) = eval x >>= (\n ->
                       eval y >>= (\m ->
                       safediv n m))

      That is, the first bind calls a function on an argument (x) and
      passes the result to another function.  The second function
      evaluates the second argument.  The third function takes the two
      prior curried results and does the real operation.

      In general, monads have syntactic sugar that turns this mess of currying:

      m1 >>= \x1 ->
      m2 >>= \x2 ->
      ...
      mn >>= \xn ->
      f x1 x2 ... xn

      into something that looks sequential

      do x1 <- m1
         x2 <- m2
         ...
         xn <- mn
         f x1 x2 ... xn


